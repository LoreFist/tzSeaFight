<?php

/**
 * tzMap
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    tzSeaFight
 * @subpackage model
 * @author     Krishenko Timofey
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class tzMap extends BasetzMap{
   
  //varible map 10x10
  private $mapSeaFight = array();
  
  /**
   * method get map sea fight
   * @return Array
   */
  public function getMap(){
    return $this->mapSeaFight;    
  }
  
  /**
   * method set map sea fight
   * @param Array $map
   */
  public function setMap($map){
    $this->mapSeaFight = $map;
  }
  
  public function __construct($table = null, $isNewEntry = false) {
    $this->resetMap();
    parent::__construct($table, $isNewEntry);
  }
  
  /**
   * reset the map
   */
  private function resetMap(){  
    for($i = 0; $i <= 10; $i++){
      for($j = 0; $j <= 10; $j++){
        $this->mapSeaFight[$i][$j] = '0';
      }
    }   
  }
  
  /**
   * check cells
   * @param array $f
   * @param integer $r
   * @param integer $c
   * @return boolean
   */
  private function cell_free($f,$r,$c){
    
    $zz = array($f[$r][$c-1], $f[$r][$c+1], $f[$r-1][$c], $f[$r+1][$c], $f[$r-1][$c-1], $f[$r+1][$c-1], $f[$r-1][$c+1], $f[$r+1][$c+1]);
    
    foreach($zz as $z ){ 
      $a[] = (gettype($z) == 'NULL' ? '0' : $z);   
    }

    $count = array_count_values($a);

    if ($count['0']=='8'){
      return true;   
    } 
    else{ 
      return false; 
    }

  }

  /**
   * what range
   * @param integer $row
   * @param integer $cell
   * @return boolean
   */
  private function in_diapason($row, $cell){
    $min = 0; $max = 10;

    if ($row > $max || $row < $min || $cell > $max || $cell < $min) { 
      return false;   
    }
    else{ 
      return true;  
    }  
  }

  /**
   * calculation of space ship
   * @param integer $cells
   */
  private function placeShip($cells){	
    
    $random = rand(0,1);

    foreach ($this->mapSeaFight as $curr_row => $array ) 
    {
      foreach ($array as $curr_cell => $value) 
      {
        $free_step = 0; 
        $free_space = array();

        for ($c=0; $c<=$cells+1; $c++){
          if ($random == 0 ){ 
            $row  = $curr_row+$c; 
            $cell = $curr_cell;   
          }
          else{  
            $row  = $curr_row; 
            $cell = $curr_cell+$c;  
          }

          if (!$this->cell_free($this->mapSeaFight,$row,$cell) || !$this->in_diapason($row, $cell)){ 
            $c_free = false; 
          } 
          else{ 
            $c_free = true; 
            $free_step++; 
          } 

          if (($free_step <= $cells && !$c_free)) { 
            unset($free_space); 
            break;   
          }  
          if ($free_step < $cells+1) { 
            $free_space[$free_step] = array($row,$cell);  
          }
        }

        foreach ($free_space as $array)  { 
          $s_array[$curr_row.$curr_cell][] = $array;   
        }
      }

    }

    foreach ($s_array[array_rand($s_array)] as $c) { 
      $this->mapSeaFight[$c[0]][$c[1]] = $cells;
    }
  }
  
  /**
   * create ship position
   */
  public function generatorPositionMap(){
    $this->placeShip(4);

    $this->placeShip(3);
    $this->placeShip(3);

    $this->placeShip(2);
    $this->placeShip(2);
    $this->placeShip(2);


    $this->placeShip(1);
    $this->placeShip(1);
    $this->placeShip(1);
    $this->placeShip(1);
  } 
  
}
